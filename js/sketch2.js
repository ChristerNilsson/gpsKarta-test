// Generated by CoffeeScript 2.5.1
var BEARINGLIST, DISTLIST, SCALE, VERSION, cx, cy, data, draw, img, index, initSounds, mapName, messages, names, preload, released, setup, speaker, start, startX, startY, state, timer, touchEnded, touchMoved, touchStarted, voice;

VERSION = 107;

BEARINGLIST = '01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36';

DISTLIST = '2 4 6 8 10 12 14 16 18 20 30 40 50 60 70 80 90 100 120 140 160 180 200 300 400 500 600 700 800 900 1000 1200 1400 1600 1800 2000 3000 4000 5000 6000 7000 8000 9000 10000';

released = true;

mapName = ""; // t ex skarpn√§ck

start = new Date();

state = 0; // 0=uninitialized 1=normal 2=info

data = null;

img = null;

startX = 0;

startY = 0;

messages = [];

index = 0;

voice = null;

speaker = null;

timer = null;

[cx, cy] = [
  0,
  0 // center (image coordinates)
];

SCALE = 1;

initSounds = function() {
  var bearing, bearingSounds, distance, distanceSounds, j, k, len, len1, ref, ref1, sound, soundDown, soundUp;
  bearingSounds = {};
  ref = BEARINGLIST.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    bearing = ref[j];
    sound = loadSound(`sounds/bearing/male/${bearing}.mp3`);
    if (sound) {
      console.log(`sounds/bearing/male/${bearing}.mp3`);
    }
    sound.setVolume(0.1);
    bearingSounds[bearing] = sound;
  }
  distanceSounds = {};
  ref1 = DISTLIST.split(' ');
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    distance = ref1[k];
    sound = loadSound(`sounds/distance/female/${distance}.mp3`);
    if (sound) {
      console.log(`sounds/distance/female/${distance}.mp3`);
    }
    sound.setVolume(0.1);
    distanceSounds[distance] = sound;
  }
  soundUp = loadSound('sounds/soundUp.wav');
  soundDown = loadSound('sounds/soundDown.wav');
  soundUp.setVolume(0.1);
  return soundDown.setVolume(0.1);
};

preload = function() {
  initSounds();
  mapName = "2023-SommarS";
  return loadJSON(`data/${mapName}.json`, function(json) {
    var control, key, ref;
    data = json;
    ref = data.controls;
    for (key in ref) {
      control = ref[key];
      control.push("");
      control.push(0);
      control.push(0);
    }
    return img = loadImage("data/" + data.map);
  });
};

setup = function() {
  var canvas;
  rectMode(CENTER);
  console.log("setup");
  canvas = createCanvas(innerWidth - 0.0, innerHeight); //-0.5
  canvas.position(0, 0); // hides text field used for clipboard copy.
  return frameRate(6);
};

//SCALE = data.scale

//[cx,cy] = [img.width/2,img.height/2]
draw = function() {
  var i, j, len, ref, results, x, y;
  background(0, 255, 0);
  if (state === 0) {
    textSize(100);
    textAlign(CENTER, CENTER);
    x = width / 2;
    y = height / 2;
    text(mapName, x, y - 100);
    text('Version: ' + VERSION, x, y - 0);
    text("Click to continue!", x, y + 100);
    return;
  }
  if (state === 1) {
    start = new Date();
    push();
    translate(width / 2, height / 2);
    scale(SCALE);
    image(img, round(-cx), round(-cy));
    pop();
    textSize(20);
    messages.push(round(frameRate()));
    ref = range(messages.length);
    //if messages.length > 50 then messages.shift()
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      if (i < messages.length - 50) {
        continue;
      }
      results.push(text(messages[i], 50, 20 + 20 * (i % 50)));
    }
    return results;
  }
};

touchStarted = function(event) {
  event.preventDefault();
  if (!released) {
    return;
  }
  //speed = 1
  released = false;
  startX = mouseX;
  startY = mouseY;
  return false;
};

touchMoved = function(event) {
  event.preventDefault();
  if (state === 1) {
    cx += (startX - mouseX) / SCALE;
    cy += (startY - mouseY) / SCALE;
    startX = mouseX;
    startY = mouseY;
  }
  xdraw();
  return false;
};

touchEnded = function(event) {
  //if state==0 then initSounds()
  event.preventDefault();
  //say index
  //index++
  if (released) {
    return;
  }
  //initSounds() 
  released = true;
  if (state === 0 || state === 2) {
    state = 1;
    return false;
  }
  return false;
};

names = (v, s) => {
  var j, len, name, ref;
  ref = s.split(' ');
  for (j = 0, len = ref.length; j < len; j++) {
    name = ref[j];
    if (-1 !== v.name.indexOf(name)) {
      return true;
    }
  }
  return false;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\gpsKarta-test\coffee\sketch2.coffee